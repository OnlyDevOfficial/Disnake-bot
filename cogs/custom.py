import disnake
import datetime
from disnake import TextInputStyle , MessageInteraction
from disnake.ext import commands
from db import DataBase

class Modal(disnake.ui.Modal):
    def __init__(self , option , command , back):
        self.option = option
        self.DataBase = DataBase("db.db")
        self.command = command
        self.back = back
        
        if option == "title":
            components = [
            disnake.ui.TextInput(
                label=option,
                custom_id=option,
                style=TextInputStyle.short,
                placeholder=option
                )
            ]
            
        elif option == "description":
            components = [
            disnake.ui.TextInput(
                label=option,
                custom_id=option,
                style=TextInputStyle.paragraph,
                placeholder=option
                )
            ]
            
        elif option == "image":
            components = [
            disnake.ui.TextInput(
                label=option,
                custom_id=option,
                style=TextInputStyle.short,
                placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É"
                )
            ]
            
        elif option == "button_name":
            components = [
            disnake.ui.TextInput(
                label=option,
                custom_id=option,
                style=TextInputStyle.short,
                placeholder="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–µ"
                )
            ]
            
        elif option == "role":
            components = [
            disnake.ui.TextInput(
                label=option,
                custom_id=option,
                style=TextInputStyle.short,
                placeholder="–£–∫–∞–∂–∏—Ç–µ id —Ä–æ–ª–∏"
                )
            ]
            
        elif option == "role_select":
            components = [
            disnake.ui.TextInput(
                label=option,
                custom_id=option,
                style=TextInputStyle.short,
                placeholder="–£–∫–∞–∂–∏—Ç–µ id —Ä–æ–ª–∏"
                )
            ]
            
        elif option == "SelectName":
            components = [
            disnake.ui.TextInput(
                label=option,
                custom_id=option,
                style=TextInputStyle.short,
                placeholder="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ–ø—Ü–∏–∏"
                )
            ]
            
        elif option == "SelectDecription":
            components = [
            disnake.ui.TextInput(
                label=option,
                custom_id=option,
                style=TextInputStyle.short,
                placeholder="–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –æ–ø—Ü–∏–∏"
                )
            ]

        super().__init__(
            title=option,
            custom_id=option,
            components=components,
        )
        
    async def callback(self, inter: disnake.ModalInteraction):
        for key, value in inter.text_values.items():
            
            if self.option == "title":
                self.DataBase.embed(inter.author.guild.name , self.command , "title" , value[:1024])
                
            elif self.option == "description":
                self.DataBase.embed(inter.author.guild.name , self.command , "description" , value[:1024])
                
            elif self.option == "image":
                self.DataBase.embed(inter.author.guild.name , self.command , "description" , value[:1024])
                
            elif self.option == "button_name":
                self.DataBase.button(inter.author.guild.name , self.command , "value" , value[:1024])
                
            elif self.option == "role":
                self.DataBase.button(inter.author.guild.name , self.command , "action" , "role" , value[:1024])
                
            elif self.option == "role_select":
                self.DataBase.select(inter.author.guild.name , self.command , "action" , "role" , value[:1024])
                
            elif self.option == "SelectName":
                self.DataBase.select(inter.author.guild.name , self.command , "name" , value[:1024])
                
            elif self.option == "SelectDecription":
                self.DataBase.select(inter.author.guild.name , self.command , "description" , value[:1024])
            
            embed = disnake.Embed(
                title="–£—Å–ø–µ—Ö",
                description=f"{self.option} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                color=disnake.Color.green()
            )
            
            await inter.response.edit_message(embed=embed , view=Back(self.command , self.back))
    
class Style(disnake.ui.StringSelect):
    def __init__(self , command):
        self.command = command
        self.DataBase = DataBase("db.db")
        
        options = [
            disnake.SelectOption(label="green" , description="–ö–Ω–æ–ø–∫–∞ –∑–µ–ª–µ–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞" , emoji="ü•ë"),
            disnake.SelectOption(label="gray" , description="–ö–Ω–æ–ø–∫–∞ —Å–µ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∞" , emoji="üç™"),
            disnake.SelectOption(label="red" , description="–ö–Ω–æ–ø–∫–∞ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞" , emoji="üçì"),
        ]
        
        super().__init__(
            custom_id="style",
            placeholder="–°—Ç–∏–ª–∏",
            min_values=1,
            max_values=1,
            options=options
        )
        
    async def callback(self , inter: MessageInteraction):
        if self.values[0] == "green":
            self.DataBase.button(inter.author.guild.name , self.command , "style" , "green")
            
        elif self.values[0] == "gray":
            self.DataBase.button(inter.author.guild.name , self.command , "style" , "gray")
            
        elif self.values[0] == "red":
            self.DataBase.button(inter.author.guild.name , self.command , "style" , "red")
    
        embed = disnake.Embed(
            title="–£—Å–ø–µ—Ö",
            description=f"–¶–≤–µ—Ç {self.values[0]} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω",
            color=disnake.Color.green()
        )
            
        await inter.response.edit_message(embed=embed , view=Back(self.command , "button"))        

class Button(disnake.ui.View):
    def __init__(self , command):
        super().__init__(timeout=None)
        self.DataBase = DataBase("db.db")
        self.command = command
        
    @disnake.ui.button(label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏" , style=disnake.ButtonStyle.green , custom_id="name")
    async def name(self , button: disnake.ui.Button , inter: disnake.Interaction):
        await inter.response.send_modal(Modal("button_name" , self.command , "button"))
        
    @disnake.ui.button(label="–°—Ç–∏–ª—å" , style=disnake.ButtonStyle.gray , custom_id="style")
    async def style(self , button: disnake.ui.Button , inter: disnake.Interaction):
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title="–°—Ç–∏–ª–∏",
            description="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å"
        )
        
        view = disnake.ui.View(timeout=None)
        view.add_item(Style(self.command))
        
        await inter.response.edit_message(embed=embed , view=view)
        
    @disnake.ui.button(label="–î–µ–π—Å—Ç–≤–∏–µ" , style=disnake.ButtonStyle.danger , custom_id="action")
    async def action(self , button: disnake.ui.Button , inter: disnake.Interaction):
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title="–î–µ–π—Å—Ç–≤–∏–µ",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞"
        )
        
        view = disnake.ui.View(timeout=None)
        view.add_item(Action(self.command , "button"))
        
        await inter.response.edit_message(embed=embed , view=view)
    
    @disnake.ui.button(label="–ù–∞–∑–∞–¥" , style=disnake.ButtonStyle.blurple , custom_id="back")
    async def back(self , button: disnake.ui.Button , inter: disnake.Interaction):
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title="Custom",
            description="–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ `–±–µ—Å–ø–ª–∞—Ç–Ω–æ`"
        )
            
        await inter.response.edit_message(embed=embed , view=Buttons(self.command))
        
        
class Action(disnake.ui.StringSelect):
    def __init__(self , command , object):
        self.command = command
        self.object = object
        
        options = [
            disnake.SelectOption(label="–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏" , description="–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –≤–∞—à—É –∫–Ω–æ–ø–∫—É –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è —Ä–æ–ª—å" , emoji="üåó"),
        ]
        
        super().__init__(
            custom_id="action",
            placeholder="–î–µ–π—Å—Ç–≤–∏—è",
            min_values=1,
            max_values=1,
            options=options
        )
        
    async def callback(self , inter: MessageInteraction):
        if self.object == "button":
            if self.values[0] == "–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏":
                await inter.response.send_modal(Modal("role" , self.command , "button"))
                
        elif self.object == "menu":
            if self.values[0] == "–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏":
                await inter.response.send_modal(Modal("role_select" , self.command , "menu"))
        

class Embed(disnake.ui.View):
    def __init__(self , command):
        super().__init__(timeout=None)
        self.DataBase = DataBase("db.db")
        self.command = command
        
    @disnake.ui.button(label="–î–æ–±–∞–≤–∏—Ç—å title" , style=disnake.ButtonStyle.green , custom_id="title")
    async def title(self , button: disnake.ui.Button , inter: disnake.Interaction):
        await inter.response.send_modal(Modal("title" , self.command , "embed"))
    
    @disnake.ui.button(label="–î–æ–±–∞–≤–∏—Ç—å description" , style=disnake.ButtonStyle.gray , custom_id="description")
    async def description(self , button: disnake.ui.Button , inter: disnake.Interaction):
        await inter.response.send_modal(Modal("description" , self.command , "embed"))
    
    @disnake.ui.button(label="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É" , style=disnake.ButtonStyle.red , custom_id="image")
    async def image(self , button: disnake.ui.Button , inter: disnake.Interaction):
        await inter.response.send_modal(Modal("image" , self.command , "embed"))

    @disnake.ui.button(label="–ù–∞–∑–∞–¥" , style=disnake.ButtonStyle.blurple , custom_id="back")
    async def back(self , button: disnake.ui.Button , inter: disnake.Interaction):
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title="Custom",
            description="–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ `–±–µ—Å–ø–ª–∞—Ç–Ω–æ`"
        )
            
        await inter.response.edit_message(embed=embed , view=Buttons(self.command))

class Buttons(disnake.ui.View):
    def __init__(self , command):
        super().__init__(timeout=None)
        self.DataBase = DataBase("db.db")
        self.command = command
        
    @disnake.ui.button(label="–î–æ–±–∞–≤–∏—Ç—å embed" , style=disnake.ButtonStyle.green , custom_id="embed")
    async def title(self , button: disnake.ui.Button , inter: disnake.Interaction):
        self.DataBase.create_embed(inter.author.guild.name , self.command)
        self.DataBase.activate(inter.author.guild.name , self.command , "embed")
        
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title="Embed",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç"
        )
        
        await inter.response.edit_message(embed=embed , view=Embed(self.command))
    
    @disnake.ui.button(label="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É" , style=disnake.ButtonStyle.danger , custom_id="button")
    async def button(self , button: disnake.ui.Button , inter: disnake.Interaction):
        self.DataBase.create_button(inter.author.guild.name , self.command)
        self.DataBase.activate(inter.author.guild.name , self.command , "button")
        
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title="Embed",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç"
        )
        
        await inter.response.edit_message(embed=embed , view=Button(self.command))
    
    @disnake.ui.button(label="–î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é" , style=disnake.ButtonStyle.green , custom_id="menu")
    async def menu(self , button: disnake.ui.Button , inter: disnake.Interaction):
        self.DataBase.activate(inter.author.guild.name , self.command , "menu")
        
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title="Embed",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç"
        )
        
        await inter.response.edit_message(embed=embed , view=Select(self.command))
    
    
class Select(disnake.ui.View):
    def __init__(self , command):
        super().__init__(timeout=None)
        self.DataBase = DataBase("db.db")
        self.command = command
        
    @disnake.ui.button(label="–î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏—é" , style=disnake.ButtonStyle.blurple , custom_id="add")
    async def add(self , button: disnake.ui.Button , inter: disnake.Interaction):
        self.DataBase.create_select(inter.author.guild.name , self.command)
        
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title="–î–µ–π—Å—Ç–≤–∏–µ",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –ø–æ–ª–µ"
        )
        
        await inter.response.edit_message(embed=embed , view=SelectButtons(self.command))
        
    @disnake.ui.button(label="–ù–∞–∑–∞–¥" , style=disnake.ButtonStyle.blurple , custom_id="back")
    async def back(self , button: disnake.ui.Button , inter: disnake.Interaction):
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title="Custom",
            description="–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ `–±–µ—Å–ø–ª–∞—Ç–Ω–æ`"
        )
            
        await inter.response.edit_message(embed=embed , view=Buttons(self.command))
      
      
class SelectButtons(disnake.ui.View):
    def __init__(self , command):
        super().__init__(timeout=None)
        self.command = command
        self.DataBase = DataBase("db.db")
        
    @disnake.ui.button(label="–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–∏" , style=disnake.ButtonStyle.danger , custom_id="name")
    async def name(self , button: disnake.ui.Button , inter: disnake.Integration):
        await inter.response.send_modal(Modal("SelectName" , self.command , "menu"))
        
        
    @disnake.ui.button(label="–û–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ü–∏–∏" , style=disnake.ButtonStyle.green , custom_id="description")
    async def description(self , button: disnake.ui.Button , inter: disnake.Integration):
        await inter.response.send_modal(Modal("SelectDecription" , self.command , "menu"))
        
        
    @disnake.ui.button(label="–î–µ–π—Å—Ç–≤–∏–µ –æ–ø—Ü–∏–∏" , style=disnake.ButtonStyle.gray , custom_id="action")
    async def action(self , button: disnake.ui.Button , inter: disnake.Integration):
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title="–î–µ–π—Å—Ç–≤–∏–µ",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–∞ –æ–ø—Ü–∏—è"
        )
        
        view = disnake.ui.View(timeout=None)
        view.add_item(Action(self.command , "menu"))
        
        await inter.response.edit_message(embed=embed , view=view)
        
    
class Back(disnake.ui.View):
    def __init__(self , command , back):
        super().__init__(timeout=None)
        self.DataBase = DataBase("db.db")
        self.command = command
        self.back = back
        
    @disnake.ui.button(label="–ù–∞–∑–∞–¥" , style=disnake.ButtonStyle.green , custom_id="back")
    async def back(self , button: disnake.ui.Button , inter: disnake.Interaction):
        if self.back == "embed":        
            view = Embed(self.command)
            
        elif self.back == "button":
            view = Button(self.command)
            
            
        elif self.back == "menu":
            view = SelectButtons(self.command)
        
        embed = disnake.Embed(
            color=disnake.Color.green(),
            title="Embed",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç"
        )
        
        await inter.response.edit_message(embed=embed , view=view)
    
class Name(disnake.ui.Modal):
    def __init__(self):
        self.DataBase = DataBase("db.db")
        
        components = [
            disnake.ui.TextInput(
                label="Name",
                custom_id="Name",
                style=TextInputStyle.short,
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã(–ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!)"
            )
        ]
        
        super().__init__(
            title="Name",
            custom_id="Name",
            components=components,
        )
        
    async def callback(self, inter: disnake.ModalInteraction):
        for key, value in inter.text_values.items():
            embed = disnake.Embed(
                color=disnake.Color.green(),
                title="Custom",
                description="–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ `–±–µ—Å–ø–ª–∞—Ç–Ω–æ`"
            )
            
            self.DataBase.command(inter.author.guild.name , value[:1024])
            await inter.send(embed=embed , view=Buttons(value[:1024]))

class Custom(commands.Cog):
    def __init__(self , bot):
        self.bot = bot
        self.DataBase = DataBase("db.db")
        
    @commands.slash_command(description="–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
    async def custom(self , ctx):
        await ctx.response.send_modal(Name())
        
        
def setup(bot):
    bot.add_cog(Custom(bot))