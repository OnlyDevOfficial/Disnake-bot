import disnake
import datetime
from disnake.ext import commands
from db import DataBase
from disnake.interactions import MessageInteraction
from disnake import TextInputStyle

class Menu(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label="–ú–æ–¥–µ—Ä–∞—Ü–∏—è" , emoji="üÉè"),
            disnake.SelectOption(label="–≠–∫–æ–Ω–æ–º–∏–∫–∞" , emoji="üíµ"),
            disnake.SelectOption(label="–ú—É–∑—ã–∫–∞" , emoji="üéµ"),
            disnake.SelectOption(label="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" , emoji="ü§ù"),
            disnake.SelectOption(label="–ü—Ä–æ—â–∞–Ω–∏–µ" , emoji="üëã"),
            disnake.SelectOption(label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã" , emoji="üó£"),
            disnake.SelectOption(label="–£—Ä–æ–≤–Ω–∏" , emoji="üéí"),
            disnake.SelectOption(label="–ö–æ–º–Ω–∞—Ç—ã" , emoji="üíæ"),
        ]
        
        super().__init__(
            custom_id="settings",
            min_values=1,
            max_values=1,
            placeholder="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            options=options
        )
        
    async def callback(self, inter: MessageInteraction):
        embed = disnake.Embed(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —Ñ—É–Ω–∫—Ü–∏—é",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç",
            color=disnake.Color.green()
        )
        
        if self.values[0] == "–ú–æ–¥–µ—Ä–∞—Ü–∏—è":
            await inter.response.edit_message(embed=embed , view=Buttons("–ú–æ–¥–µ—Ä–∞—Ü–∏—è"))
        
        elif self.values[0] == "–≠–∫–æ–Ω–æ–º–∏–∫–∞":
            await inter.response.edit_message(embed=embed , view=Buttons("–≠–∫–æ–Ω–æ–º–∏–∫–∞"))
            
        elif self.values[0] == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ":
            await inter.response.edit_message(embed=embed , view=Buttons("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"))
            
        elif self.values[0] == "–ü—Ä–æ—â–∞–Ω–∏–µ":
            await inter.response.edit_message(embed=embed , view=Buttons("–ü—Ä–æ—â–∞–Ω–∏–µ"))
            
        elif self.values[0] == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã":
            await inter.response.edit_message(embed=embed , view=Buttons("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã"))
            
        elif self.values[0] == "–£—Ä–æ–≤–Ω–∏":
            await inter.response.edit_message(embed=embed , view=Buttons("–£—Ä–æ–≤–Ω–∏"))
            
        elif self.values[0] == "–ú—É–∑—ã–∫–∞":
            await inter.response.edit_message(embed=embed , view=Buttons("–ú—É–∑—ã–∫–∞"))
            
        elif self.values[0] == "–ö–æ–º–Ω–∞—Ç—ã":
            await inter.response.edit_message(embed=embed , view=Buttons("–ö–æ–º–Ω–∞—Ç—ã"))
            
class Buttons(disnake.ui.View):
    def __init__(self , option):
        super().__init__(timeout=None)
        self.DataBase = DataBase("db.db")
        self.option = option
        
    @disnake.ui.button(label="–ù–∞–∑–∞–¥" , style=disnake.ButtonStyle.gray , custom_id="back")
    async def back(self , button: disnake.ui.Button , inter: disnake.Interaction):
        embed = disnake.Embed(
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª–µ–π",
            color=disnake.Color.green()
        )
        
        date = datetime.datetime.now()
        embed.set_footer(text=f"{date}")
        view = disnake.ui.View(timeout=None)
        view.add_item(Menu())
        await inter.response.edit_message(embed=embed , view=view)
        
    @disnake.ui.button(label="–í–∫–ª—é—á–∏—Ç—å" , style=disnake.ButtonStyle.green , custom_id="on")
    async def on(self , button: disnake.ui.Button , inter: disnake.Interaction):
        if self.option == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" or self.option == "–ü—Ä–æ—â–∞–Ω–∏–µ":
            await inter.response.send_modal(Modal(self.option))
            
        else:
            self.DataBase.settings(inter.author.guild.name , self.option , "True")
            embed = disnake.Embed(
                title="–£—Å–ø–µ—Ö",
                description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                color=disnake.Color.green()
            )
            await inter.response.edit_message(embed=embed , view=Back())
    
    @disnake.ui.button(label="–í—ã–∫–ª—é—á–∏—Ç—å" , style=disnake.ButtonStyle.red , custom_id="off")
    async def off(self , button: disnake.ui.Button , inter: disnake.Interaction):
        if self.option == "–ö–æ–º–Ω–∞—Ç—ã":
            if self.DataBase.check_settings_true_module(inter.author.guild.name , "rooms"):
                category = self.DataBase.check_id_channel(inter.author.guild.name , "music_category")
                category = disnake.utils.get(inter.author.guild.categories , id=category)
                for channel in category.channels:
                    await channel.delete()
                    
                await category.delete()
                self.DataBase.settings(inter.author.guild.name , "–ö–æ–º–Ω–∞—Ç—ã" , "False")
                self.DataBase.settings(inter.author.guild.name , "id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" , "None")
                
        else: self.DataBase.settings(inter.author.guild.name , self.option , "False")
                
        embed = disnake.Embed(
            title="–£—Å–ø–µ—Ö",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            color=disnake.Color.green()
        )
        
        await inter.response.edit_message(embed=embed , view=Back())

class Back(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.DataBase = DataBase("db.db")
        
    @disnake.ui.button(label="–ù–∞–∑–∞–¥" , style=disnake.ButtonStyle.gray , custom_id="back")
    async def back(self , button: disnake.ui.Button , inter: disnake.Interaction):
        embed = disnake.Embed(
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª–µ–π",
            color=disnake.Color.green()
        )
        
        date = datetime.datetime.now()
        embed.set_footer(text=f"{date}")
        view = disnake.ui.View(timeout=None)
        view.add_item(Menu())
        await inter.response.edit_message(embed=embed , view=view)

class Modal(disnake.ui.Modal):
    def __init__(self , option):
        components = [
            disnake.ui.TextInput(
                label="Id",
                custom_id="Id",
                style=TextInputStyle.short,
                placeholder="Id –∫–∞–Ω–∞–ª–∞"
            )
        ]

        super().__init__(
            title="Id",
            custom_id="Id",
            components=components,
        )
        
        self.DataBase = DataBase("db.db")
        self.option = option

    async def callback(self, inter: disnake.ModalInteraction):
        for key, value in inter.text_values.items():
            self.DataBase.settings(inter.author.guild.name , self.option , value[:1024])
            embed = disnake.Embed(
                title="–£—Å–ø–µ—Ö",
                description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                color=disnake.Color.green()
            )

        await inter.response.edit_message(embed=embed , view=Back())

class Settings(commands.Cog):
    def __init__(self , bot):
        self.bot = bot
        self.DataBase = DataBase("db.db")
        
    @commands.slash_command(description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    @commands.has_permissions(administrator=True)
    async def settings(self , ctx):
        if not self.DataBase.check_settings(ctx.author.guild.name):
            self.DataBase.setup_settings(ctx.author.guild.name)
            
        embed = disnake.Embed(
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª–µ–π",
            color=disnake.Color.green()
        )
        
        date = datetime.datetime.now()
        embed.set_footer(text=f"{date}")
        view = disnake.ui.View(timeout=None)
        view.add_item(Menu())
        await ctx.send(embed=embed , view=view)
    
def setup(bot):
    bot.add_cog(Settings(bot))